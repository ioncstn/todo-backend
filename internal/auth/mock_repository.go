// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/auth/repository.go -destination=./internal/auth/mock_repository.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteExpiredTokens mocks base method.
func (m *MockRepository) DeleteExpiredTokens(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredTokens", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredTokens indicates an expected call of DeleteExpiredTokens.
func (mr *MockRepositoryMockRecorder) DeleteExpiredTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredTokens", reflect.TypeOf((*MockRepository)(nil).DeleteExpiredTokens), ctx)
}

// GetRefreshToken mocks base method.
func (m *MockRepository) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", ctx, token)
	ret0, _ := ret[0].(RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockRepositoryMockRecorder) GetRefreshToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockRepository)(nil).GetRefreshToken), ctx, token)
}

// RevokeRefreshTokensByUserID mocks base method.
func (m *MockRepository) RevokeRefreshTokensByUserID(ctx context.Context, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshTokensByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshTokensByUserID indicates an expected call of RevokeRefreshTokensByUserID.
func (mr *MockRepositoryMockRecorder) RevokeRefreshTokensByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshTokensByUserID", reflect.TypeOf((*MockRepository)(nil).RevokeRefreshTokensByUserID), ctx, userID)
}

// SaveRefreshToken mocks base method.
func (m *MockRepository) SaveRefreshToken(ctx context.Context, token *RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockRepositoryMockRecorder) SaveRefreshToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockRepository)(nil).SaveRefreshToken), ctx, token)
}
